MongoDB

CP-система (Consistency + Partition tolerance — Availability)
В каждый момент обеспечивает целостность данных и способна работать в условиях распада в ущерб 
доступности, не выдавая отклик на запрос. Устойчивость к разделению требует дублирования изменений 
во всех узлах системы, что реализуется с помощью распределённых пессимистических блокировок для сохранения целостности. 
По сути, CP – это система с несколькими синхронно обновляемыми мастер-базами. Она всегда корректна, отрабатывая транзакцию, 
только в том случае, если изменения удалось распространить по всем серверам. Она продолжает корректно читать данные даже 
при отказе одного из узлов кластера. Но в этом случае запись будет обрываться или сильно задерживаться, пока система 
не убедится в своей целостности и согласованности (консистентности)

Cassandra

AP-система (Availability + Partition tolerance — Consistency) не гарантирует целостность данных, 
обеспечивая их доступность и устойчивость к разделению. 
Считается, что большинство NoSQL-СУБД относятся к этому классу систем, обеспечивая лишь некоторой уровень 
согласованности данных в конечном счете (eventually consistent). Таким образом, AP-система может быть 
представлена кластером из нескольких узлов, каждый из которых может принимать данные, но не обязуется 
в тот же момент распространять их на другие сервера. Такая система отлично справляется с отказами 
нескольких узлов, но, когда они снова начинают работать, возможна выдача пользователям старых данных.

MSSQL

CA (Availability + Consistency — Parition tolerance), когда данные во всех узлах кластера согласованы и доступны, 
но не устойчивы к разделению. Это означает, что реплики одной и той же информации, распределенные по разным серверам друг другу, 
не противоречат друг другу и любой запрос к распределённой системе завершается корректным откликом. 
Такие системы возможны при поддержке ACID-требований к транзакциям (Атомарность, Согласованность, Изоляция, Долговечность) 
и абсолютной надежности сети.